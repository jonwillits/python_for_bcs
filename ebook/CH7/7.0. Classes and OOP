# 7.0. Classes and Object-Oriented Programming

We're ready for our last topic in our Python crash course, before we move on to some Brain and Cognitive Science 
applications. But first we need to cover classes.


## Object-oriented Languages
Python is what is called an object-oriented language. This means that the design of python is organized around objects.
Almost every data structure in python is an object. Lists, dictionaries, strings, integers, floats, sets - these are 
all objects. Objects are data structures that allow you to bundle together variables and functions.

Take lists for example, there is the data in the list, and then there are the functions you can use in the list, like 
.append() and .search().

Object-oriented languages can be contrasted with functional languages. In a functional language, most of the code exists 
as functions that get passed objects, but are not themselves a part of the objects.

If you reflect back on what we've been learning, you'll see that almost everything we've learned to do involves objects 
and their methods, like .append() for lists and .mean() for numpy arrays. We have learned about a few functions that get 
passed things and don't belong to a specific object, like print() and sum() and len(). But these are actually pretty 
rare in python.

There are pros and cons to object-oriented languages vs. functional languages. If you're interested in learning more 
about this, check out this web page:
https://www.educative.io/blog/functional-programming-vs-oop

## Creating Our Own Classes

Sometimes when programming we want to create our own special classes to make our code more organized and re-usable.

Creating a class in python is easy.
```python

class Animal:
    
    def __init__(self, species):
        self.species = species

my_animal = Animal("dog")
print(my_animal)
print(my_animal.species)
```
Which generates the output:
```text
<__main__.Animal object at 0x101309810>
dog
```
The first print statement is what happens when we print the class itself. This just gives us some difficult to read 
information about the name of the class, and some memory information about where it is stored in your RAM (that's the
0x101309810 hexidecimal numbrer). 

Below, let's walk through three other important things about the class definition above.

<br>

## Class Definitions
When we declare a class, we use the "class" keyword, and then provide the name of our class.
Standard python naming rules apply (don't start with numbers, no spaces, etc.). When naming a class, a convention is to 
start it with upper-case, and to use "CamelCase" (i.e., concatenate word without underscores, and capitalize the start 
of each word).

<br>

## Instances of a Class
In the line 
```python
my_animal = Animal("dog")
```
we create an instance of the class. Notice how this is very similar to the way we create instances of built in Python
data types:
```python
my_float = float(5)
my_set = set('doggy')
my_array = np.array([1, 2, 3, 4, 5])
```
In each case we create an instance variable that we name whatever we want, and assign to it the name of the class.
When we create the instance, we can pass it information that the class will use when the instance is created.

<br>

## The \_\_init\_\_() Function in a Class
A class usually has an "init" function, inside it. This is the function that runs when you create an instance 
of the class, as we do here. When the instance is created,  any code in the init function is run.
Think of it like the main() function for that class.


<br>

## Using "self" in classes
The final thing to notice about class definitions is that they use a special kind of variable to denote attributes and 
methods that belong to the class. This is the "self." command, which you put before any variable in the class. You can 
almost think of "self" as like a dictionary that stores all the data in the class, but instead of accessing the data 
using self[variable_name], you use self.variable name. We only use self before a variable name inside of a class. When 
we are outside a class dealing with one of its instances, we instead use the instance name that we created (in this case, 
"my_animal") and put that before the variable name to access that variable.

The other thing to notice about _self_ is that we must pass it into each function inside of a class, as we did in the 
init function. It must be the first thing we pass to each function. 



Next: [7.1. Class Attributes](7.1.%20Class%20Attributes.md)<br>
Previous: [6.6 Homework 3](../CH6/6.6.%20HW3.md)
